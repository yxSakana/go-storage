// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.2
// Source: user.proto

package user

import (
	"context"

	"go-storage/app/user/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ActivateAccountReq    = pb.ActivateAccountReq
	ActivateAccountResp   = pb.ActivateAccountResp
	GenerateTokenReq      = pb.GenerateTokenReq
	GenerateTokenResp     = pb.GenerateTokenResp
	GetUserInfoReq        = pb.GetUserInfoReq
	GetUserInfoResp       = pb.GetUserInfoResp
	LoginReq              = pb.LoginReq
	LoginResp             = pb.LoginResp
	RegisterReq           = pb.RegisterReq
	RegisterResp          = pb.RegisterResp
	SendActivateEmailReq  = pb.SendActivateEmailReq
	SendActivateEmailResp = pb.SendActivateEmailResp
	User                  = pb.User

	UserZrpcClient interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		SendActivateEmail(ctx context.Context, in *SendActivateEmailReq, opts ...grpc.CallOption) (*SendActivateEmailResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
		ActivateAccount(ctx context.Context, in *ActivateAccountReq, opts ...grpc.CallOption) (*ActivateAccountResp, error)
	}

	defaultUserZrpcClient struct {
		cli zrpc.Client
	}
)

func NewUserZrpcClient(cli zrpc.Client) UserZrpcClient {
	return &defaultUserZrpcClient{
		cli: cli,
	}
}

func (m *defaultUserZrpcClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) SendActivateEmail(ctx context.Context, in *SendActivateEmailReq, opts ...grpc.CallOption) (*SendActivateEmailResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.SendActivateEmail(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}

func (m *defaultUserZrpcClient) ActivateAccount(ctx context.Context, in *ActivateAccountReq, opts ...grpc.CallOption) (*ActivateAccountResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.ActivateAccount(ctx, in, opts...)
}
