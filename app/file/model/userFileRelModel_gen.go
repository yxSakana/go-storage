// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFileRelFieldNames          = builder.RawFieldNames(&UserFileRel{})
	userFileRelRows                = strings.Join(userFileRelFieldNames, ",")
	userFileRelRowsExpectAutoSet   = strings.Join(stringx.Remove(userFileRelFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userFileRelRowsWithPlaceHolder = strings.Join(stringx.Remove(userFileRelFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	gztCacheUserFileRelIdPrefix           = "gztCache:userFileRel:id:"
	gztCacheUserFileRelUserIdFileIdPrefix = "gztCache:userFileRel:userId:fileId:"
)

type (
	userFileRelModel interface {
		Insert(ctx context.Context, data *UserFileRel) (sql.Result, error)
		InsertWithSession(ctx context.Context, session sqlx.Session, data *UserFileRel) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*UserFileRel, error)
		FindOneByUserIdFileId(ctx context.Context, userId uint64, fileId uint64) (*UserFileRel, error)
		Update(ctx context.Context, data *UserFileRel) error
		UpdateWithSession(ctx context.Context, session sqlx.Session, data *UserFileRel) error
		Delete(ctx context.Context, id uint64) error
		DeleteWithSession(ctx context.Context, session sqlx.Session, id uint64) error
	}

	defaultUserFileRelModel struct {
		sqlc.CachedConn
		table string
	}

	UserFileRel struct {
		Id            uint64    `db:"id"`
		UserId        uint64    `db:"user_id"`
		FileId        uint64    `db:"file_id"`
		FilenameAlias string    `db:"filename_alias"` // 用户命名的文件名
		CreateTime    time.Time `db:"create_time"`
	}
)

func newUserFileRelModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserFileRelModel {
	return &defaultUserFileRelModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_file_rel`",
	}
}

func (m *defaultUserFileRelModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userFileRelIdKey := fmt.Sprintf("%s%v", gztCacheUserFileRelIdPrefix, id)
	userFileRelUserIdFileIdKey := fmt.Sprintf("%s%v:%v", gztCacheUserFileRelUserIdFileIdPrefix, data.UserId, data.FileId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userFileRelIdKey, userFileRelUserIdFileIdKey)
	return err
}

func (m *defaultUserFileRelModel) DeleteWithSession(ctx context.Context, session sqlx.Session, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userFileRelIdKey := fmt.Sprintf("%s%v", gztCacheUserFileRelIdPrefix, id)
	userFileRelUserIdFileIdKey := fmt.Sprintf("%s%v:%v", gztCacheUserFileRelUserIdFileIdPrefix, data.UserId, data.FileId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return session.ExecCtx(ctx, query, id)
	}, userFileRelIdKey, userFileRelUserIdFileIdKey)
	return err
}

func (m *defaultUserFileRelModel) FindOne(ctx context.Context, id uint64) (*UserFileRel, error) {
	userFileRelIdKey := fmt.Sprintf("%s%v", gztCacheUserFileRelIdPrefix, id)
	var resp UserFileRel
	err := m.QueryRowCtx(ctx, &resp, userFileRelIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFileRelRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFileRelModel) FindOneByUserIdFileId(ctx context.Context, userId uint64, fileId uint64) (*UserFileRel, error) {
	userFileRelUserIdFileIdKey := fmt.Sprintf("%s%v:%v", gztCacheUserFileRelUserIdFileIdPrefix, userId, fileId)
	var resp UserFileRel
	err := m.QueryRowIndexCtx(ctx, &resp, userFileRelUserIdFileIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `file_id` = ? limit 1", userFileRelRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, fileId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserFileRelModel) Insert(ctx context.Context, data *UserFileRel) (sql.Result, error) {
	userFileRelIdKey := fmt.Sprintf("%s%v", gztCacheUserFileRelIdPrefix, data.Id)
	userFileRelUserIdFileIdKey := fmt.Sprintf("%s%v:%v", gztCacheUserFileRelUserIdFileIdPrefix, data.UserId, data.FileId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userFileRelRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.FileId, data.FilenameAlias)
	}, userFileRelIdKey, userFileRelUserIdFileIdKey)
	return ret, err
}

func (m *defaultUserFileRelModel) InsertWithSession(ctx context.Context, session sqlx.Session, data *UserFileRel) (sql.Result, error) {
	userFileRelIdKey := fmt.Sprintf("%s%v", gztCacheUserFileRelIdPrefix, data.Id)
	userFileRelUserIdFileIdKey := fmt.Sprintf("%s%v:%v", gztCacheUserFileRelUserIdFileIdPrefix, data.UserId, data.FileId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, userFileRelRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.UserId, data.FileId, data.FilenameAlias)
	}, userFileRelIdKey, userFileRelUserIdFileIdKey)
	return ret, err
}

func (m *defaultUserFileRelModel) Update(ctx context.Context, newData *UserFileRel) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userFileRelIdKey := fmt.Sprintf("%s%v", gztCacheUserFileRelIdPrefix, data.Id)
	userFileRelUserIdFileIdKey := fmt.Sprintf("%s%v:%v", gztCacheUserFileRelUserIdFileIdPrefix, data.UserId, data.FileId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userFileRelRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.FileId, newData.FilenameAlias, newData.Id)
	}, userFileRelIdKey, userFileRelUserIdFileIdKey)
	return err
}

func (m *defaultUserFileRelModel) UpdateWithSession(ctx context.Context, session sqlx.Session, newData *UserFileRel) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userFileRelIdKey := fmt.Sprintf("%s%v", gztCacheUserFileRelIdPrefix, data.Id)
	userFileRelUserIdFileIdKey := fmt.Sprintf("%s%v:%v", gztCacheUserFileRelUserIdFileIdPrefix, data.UserId, data.FileId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userFileRelRowsWithPlaceHolder)
		return session.ExecCtx(ctx, query, newData.UserId, newData.FileId, newData.FilenameAlias, newData.Id)
	}, userFileRelIdKey, userFileRelUserIdFileIdKey)
	return err
}

func (m *defaultUserFileRelModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", gztCacheUserFileRelIdPrefix, primary)
}

func (m *defaultUserFileRelModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userFileRelRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserFileRelModel) tableName() string {
	return m.table
}
