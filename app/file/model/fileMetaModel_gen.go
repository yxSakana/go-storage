// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	fileMetaFieldNames          = builder.RawFieldNames(&FileMeta{})
	fileMetaRows                = strings.Join(fileMetaFieldNames, ",")
	fileMetaRowsExpectAutoSet   = strings.Join(stringx.Remove(fileMetaFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	fileMetaRowsWithPlaceHolder = strings.Join(stringx.Remove(fileMetaFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	gztCacheFileMetaIdPrefix   = "gztCache:fileMeta:id:"
	gztCacheFileMetaHashPrefix = "gztCache:fileMeta:hash:"
)

type (
	fileMetaModel interface {
		Insert(ctx context.Context, data *FileMeta) (sql.Result, error)
		InsertWithSession(ctx context.Context, session sqlx.Session, data *FileMeta) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*FileMeta, error)
		FindOneByHash(ctx context.Context, hash string) (*FileMeta, error)
		Update(ctx context.Context, data *FileMeta) error
		UpdateWithSession(ctx context.Context, session sqlx.Session, data *FileMeta) error
		Delete(ctx context.Context, id uint64) error
		DeleteWithSession(ctx context.Context, session sqlx.Session, id uint64) error
	}

	defaultFileMetaModel struct {
		sqlc.CachedConn
		table string
	}

	FileMeta struct {
		Id       uint64    `db:"id"`
		Hash     string    `db:"hash"`   // 文件唯一Hash
		Size     int64     `db:"size"`   // 文件大小（字节）
		Path     string    `db:"path"`   // 存储路径
		Status   int64     `db:"status"` // 1=可用，0=删除
		CreateAt time.Time `db:"create_at"`
	}
)

func newFileMetaModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultFileMetaModel {
	return &defaultFileMetaModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`file_meta`",
	}
}

func (m *defaultFileMetaModel) Delete(ctx context.Context, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	fileMetaHashKey := fmt.Sprintf("%s%v", gztCacheFileMetaHashPrefix, data.Hash)
	fileMetaIdKey := fmt.Sprintf("%s%v", gztCacheFileMetaIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, fileMetaHashKey, fileMetaIdKey)
	return err
}

func (m *defaultFileMetaModel) DeleteWithSession(ctx context.Context, session sqlx.Session, id uint64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	fileMetaHashKey := fmt.Sprintf("%s%v", gztCacheFileMetaHashPrefix, data.Hash)
	fileMetaIdKey := fmt.Sprintf("%s%v", gztCacheFileMetaIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return session.ExecCtx(ctx, query, id)
	}, fileMetaHashKey, fileMetaIdKey)
	return err
}

func (m *defaultFileMetaModel) FindOne(ctx context.Context, id uint64) (*FileMeta, error) {
	fileMetaIdKey := fmt.Sprintf("%s%v", gztCacheFileMetaIdPrefix, id)
	var resp FileMeta
	err := m.QueryRowCtx(ctx, &resp, fileMetaIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileMetaRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileMetaModel) FindOneByHash(ctx context.Context, hash string) (*FileMeta, error) {
	fileMetaHashKey := fmt.Sprintf("%s%v", gztCacheFileMetaHashPrefix, hash)
	var resp FileMeta
	err := m.QueryRowIndexCtx(ctx, &resp, fileMetaHashKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `hash` = ? limit 1", fileMetaRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, hash); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFileMetaModel) Insert(ctx context.Context, data *FileMeta) (sql.Result, error) {
	fileMetaHashKey := fmt.Sprintf("%s%v", gztCacheFileMetaHashPrefix, data.Hash)
	fileMetaIdKey := fmt.Sprintf("%s%v", gztCacheFileMetaIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, fileMetaRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Hash, data.Size, data.Path, data.Status)
	}, fileMetaHashKey, fileMetaIdKey)
	return ret, err
}

func (m *defaultFileMetaModel) InsertWithSession(ctx context.Context, session sqlx.Session, data *FileMeta) (sql.Result, error) {
	fileMetaHashKey := fmt.Sprintf("%s%v", gztCacheFileMetaHashPrefix, data.Hash)
	fileMetaIdKey := fmt.Sprintf("%s%v", gztCacheFileMetaIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, fileMetaRowsExpectAutoSet)
		return session.ExecCtx(ctx, query, data.Hash, data.Size, data.Path, data.Status)
	}, fileMetaHashKey, fileMetaIdKey)
	return ret, err
}

func (m *defaultFileMetaModel) Update(ctx context.Context, newData *FileMeta) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	fileMetaHashKey := fmt.Sprintf("%s%v", gztCacheFileMetaHashPrefix, data.Hash)
	fileMetaIdKey := fmt.Sprintf("%s%v", gztCacheFileMetaIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fileMetaRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Hash, newData.Size, newData.Path, newData.Status, newData.Id)
	}, fileMetaHashKey, fileMetaIdKey)
	return err
}

func (m *defaultFileMetaModel) UpdateWithSession(ctx context.Context, session sqlx.Session, newData *FileMeta) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	fileMetaHashKey := fmt.Sprintf("%s%v", gztCacheFileMetaHashPrefix, data.Hash)
	fileMetaIdKey := fmt.Sprintf("%s%v", gztCacheFileMetaIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, fileMetaRowsWithPlaceHolder)
		return session.ExecCtx(ctx, query, newData.Hash, newData.Size, newData.Path, newData.Status, newData.Id)
	}, fileMetaHashKey, fileMetaIdKey)
	return err
}

func (m *defaultFileMetaModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", gztCacheFileMetaIdPrefix, primary)
}

func (m *defaultFileMetaModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", fileMetaRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultFileMetaModel) tableName() string {
	return m.table
}
