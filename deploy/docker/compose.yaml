services:

  go-storage:
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile
    labels:
      co.elastic.logs/module: backend
      co.elastic.logs/type: backend-log
      co.elastic.logs/json.keys_under_root: true
    container_name: "go-storage-backend"
    restart: on-failure
    ports:
      - "5001:5001"
      - "5002:5002"
      - "5003:5003"
      - "4001:4001"
      - "4002:4002"
      - "4003:4003"
    depends_on:
      redis:
        condition: service_healthy
      database:
        condition: service_healthy
    networks:
      - gs_net

  redis:
    image: "redis:latest"
    container_name: "gs-redis"
    networks:
      - gs_net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      retries: 5
      timeout: 3s

  database:
    environment:
      MYSQL_USER: "mysql"
      MYSQL_PASSWORD: "aaa"
      MYSQL_DATABASE: "go_storage"
      MYSQL_ROOT_PASSWORD: "aaa"
    image: "mysql:latest"
    container_name: "gs-db-mysql"
    volumes:
      - "../../deploy/sql/go_storage.sql:/docker-entrypoint-initdb.d/db.sql"
    networks:
      - gs_net
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      timeout: 5s

  filebeat:
    user: root
    image: docker.elastic.co/beats/filebeat:8.17.4
    container_name: gs-filebeat
    # no: 不自动重启; always: 总是重启; no-failure: 只有容器因故障退出时重启; unless-stopped: 只有容器不是被手动停止时才会重启
    restart: always
    networks:
      - gs_net
    environment:
      - "TZ=Asia/Shanghai"
    # 运行filebeat并将日志输出到stdout, 同时关闭filebeat的权限检测, 避免filebeat在读取文件时遇到权限错误
    entrypoint: "filebeat -e --strict.perms=false"
    volumes:
      - ../filebeat/conf/filebeat-simple.yml:/usr/share/filebeat/filebeat.yml # 配置文件
      - /var/lib/docker/containers:/var/lib/docker/containers # 使filebeat可读取docker容器的日志
    depends_on:
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.4
    container_name: gs-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - gs_net
    environment:
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"  # 初始堆大小、最大堆大小
      - "TZ=Asia/Shanghai"
      - "discovery.type=single-node" # 单节点模式
      - "xpack.security.enabled=false" # 关闭认证(生产环境不可)
    volumes:
      - ../../data/es/data:/usr/share/elasticsearch/data # 数据持久化
      - ../../data/es/plugins:/usr/share/elasticsearch/plugins # 插件持久化

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.4
    container_name: gs-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    networks:
      - gs_net
    environment:
      - "TZ=Asia/Shanghai"
      - "I18N_LOCALE=zh-CN"
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200" # elasticsearch host
      - "XPACK_SECURITY_ENABLED=false" # 关闭认证(生产环境不可)
    depends_on:
      - elasticsearch

  jaeger:
    image: jaegertracing/jaeger:2.5.0
    container_name: gs-jaeger
    restart: always
    ports:
      - "16686:16686"
      - "4317:4317"
      - "14268:14268"
      - "4318:4318"
      - "5778:5778"
      - "9411:9411"
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - LOG_LEVEL=debug
    depends_on:
      - elasticsearch
    networks:
      - gs_net

  prometheus:
    image: prom/prometheus:latest
    container_name: gs-prometheus
    user: root
    restart: always
    ports:
      - "9090:9090"
    networks:
      - gs_net
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ../prometheus/config.yaml:/etc/prometheus/prometheus.yml
      - ../../data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  grafana:
    image: grafana/grafana:latest
    container_name: gs-grafana
    user: root
    hostname: grafana
    ports:
      - "3000:3000"
    networks:
      - gs_net
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    restart: always
    volumes:
      - ../../data/grafana/data:/var/lib/grafana

networks:
  gs_net:
    name: "gs_net"
    driver: bridge
